const chai = require('chai');
const sinon = require('sinon');
const controller = require('../../controllers/bigfiveController');
const pool = require('../mocks/dataBaseMock');
const { describe, it, beforeEach, afterEach } = require('mocha');
const expect = chai.expect;

describe('BigFive Controller', () => {
  let sandbox;
  let req;
  let res;

  beforeEach(() => {
    sandbox = sinon.createSandbox();
    req = { body: {}, params: {} };
    res = {
      status: sinon.stub().returnsThis(),
      json: sinon.stub(),
    };
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('guardarBigFive()', () => {
    it('debe retornar 400 si faltan datos', async () => {
      req.body = { id_usuario: 1 };
      await controller.guardarBigFive(req, res);
      expect(res.status.calledWith(400)).to.be.true;
      expect(res.json.calledWith({
        error: 'Faltan datos requeridos para guardar el resultado del test.'
      })).to.be.true;
    });

    it('debe guardar correctamente y retornar 201', async () => {
      const executeStub = sandbox.stub(pool, 'execute').resolves([{ insertId: 123 }]);
      req.body = {
        id_usuario: 1,
        neuroticismo: 10,
        extraversion: 20,
        apertura: 30,
        amabilidad: 40,
        responsabilidad: 50
      };

      await controller.guardarBigFive(req, res);
      expect(executeStub.calledOnce).to.be.true;
      expect(res.status.calledWith(201)).to.be.true;
      expect(res.json.calledWith({
        message: 'Resultado guardado correctamente',
        id_resultado: 123
      })).to.be.true;
    });

    it('debe manejar errores de base de datos', async () => {
      sandbox.stub(pool, 'execute').rejects(new Error('DB error'));
      req.body = {
        id_usuario: 1,
        neuroticismo: 10,
        extraversion: 20,
        apertura: 30,
        amabilidad: 40,
        responsabilidad: 50
      };

      await controller.guardarBigFive(req, res);
      expect(res.status.calledWith(500)).to.be.true;
      expect(res.json.calledWith({
        error: 'Error al guardar resultado del test'
      })).to.be.true;
    });
  });

  describe('obtenerBigFivePorUsuario()', () => {
    it('debe retornar 400 si falta id_usuario', async () => {
      req.params = {};
      await controller.obtenerBigFivePorUsuario(req, res);
      expect(res.status.calledWith(400)).to.be.true;
      expect(res.json.calledWith({ error: 'Falta el id_usuario' })).to.be.true;
    });

    it('debe retornar resultados correctamente', async () => {
      const fakeResults = [{ id: 1, neuroticismo: 10 }];
      sandbox.stub(pool, 'execute').resolves([fakeResults]);
      req.params = { id_usuario: '1' };

      await controller.obtenerBigFivePorUsuario(req, res);
      expect(res.status.calledWith(200)).to.be.true;
      expect(res.json.calledWith(fakeResults)).to.be.true;
    });
  });
});